1、AmazeUI并没有提供需要的JQuery，本项目用2.1.1版本代替，后果未知。
2、后台使用了iframe来嵌套内部局部区域，点击左侧菜单时，改变iframe的target，从而改变网页。后台不需要注重SEO，所以使用iframe没关系。
3、添加控制器会自动添加一个视图文件夹，所以控制器的基类也会有个文件夹，用不到可以删掉。
4、布局页主要是为了解决各个页面公用的部分，特别是<head>里的各种CSS和JS的引用。
5、UI中所有指向网页的url改为指向控制器动作的url，如/Manage/Setting/Index(不加~),资源文件还是使用实际url，如~/Content/JS/jquery.min-2.1.1.js，~代表网站根目录。
6、因为MVC的文件夹约定，所以目录结构多，可以点击资源管理器上边全部折叠，再按需要展开。
7、数据库文件不要放在bin目录下，因为bin目录下每次改变都会造成session丢失。建议放在App_Data里。
8、建立表时，除了非空、主键约束外，其他外键之类建议在程序里控制，更加灵活点，否者以后管理起来不方便。
9、使用动软生成器生成三层代码，10年前都喜欢把BLL、DAL等分成同一解决方案的不同项目，现在没有必要了。
生成的DAL有个bug，getsingle（）使用了dbhelpersql，改成dbhelpersqlite。
10、运行时，如果只是更改视图的html代码，那么不需要重启，刷新网页就可以看见更新。
11、简单的JS可以直接内联写在html里，如按钮的跳转onclick="window.location.href='User/Register'"。
12、通过复制Login视图，略作修改后作为Register视图。
13、MVC的表单验证采用的是JQuery的Validate插件。
14、控制器中的action可以直接return Content("XXXXX"),而不返回视图，网页就会以存文本显示内容，可以利用这个做简单的提醒。
15、<div class="am-u-lg-6 am-u-md-8 am-u-sm-centered">意思是：大屏幕占6份，中屏幕占8份。写多个才能响应不同大小屏幕。
16、html元素中data-开头的属性，是自定义属性。前端框架一般用类名属性来应用CSS，用自定义属性来应用JS。因为data-XXX="xxx",可以带值，从而可以把参数传给JS。
17、登录查询时，改造User的dal，使它支持通过用户名来查询model，默认只有通过id来查询model。并使用参数化查询，避免sql注入攻击。
18、前台登录使用Session，后台使用票据。Session["Login_user"]可以直接保存对象，不仅仅是字符串。
19、var loginUser = Session["login_user"] as MVCLite.Models.User使用as来强制类型转换比较现代和高效，因为它只有确认可以转换时才转换，并且可以为null，是安全的。
20、MVC框架自带表单验证，每个继承自Controller的类都有ModelState成员，用来记录表单验证信息，前台@Html.ValidationSummary()可以输出这些信息。（有待深入研究）
21、ASP.NET框架提供表单认证来管理访问权限，即某些控制器或页面需要通过登录某个表单之后才能访问。需要在web.config里进行配置登录页，在需要限制的控制器上添加特性标注（WebForm则是在web.config中配置访问路径），然后在Global.asax中添加票据代码。（有待深入研究）
如果自己手写权限验证代码，那么需要在每个页面加入判断，而ASP.NET提供的表单认证，只要进行配置就可以了。
22、web.config是xml文件，通过规定的元素来配置网站。可以放在任何目录中，每个目录的页面先寻找本级web.config,最终找到根目录的配置，本级的配置可以覆盖上级。IIS会监视配置文件的更改，所以配置更改后，不需要重启网站，直接生效。
23、票据访问是不让没有权限的人访问到页面，如后台所有页面；而前台页面不管你登录与否，是可以让所有人访问的，所以不适合票据。
24、模型和视图模型虽然本质上都是模型，但是使用场景不一样。模型主要和业务数据有关，而视图模型是专门为了某个视图上的数据准备的模型，是为了方便处理视图上的数据的，比如视图上的一个表单中的很多数据。
视图模型+强类型视图一个优点：复杂表单中的各个输入字段对应视图模型的属性，提交的时候，控制器可以以该模型为输入参数。这样可以更加有效管理数据，也有更多的代码提示。
25、除了UI框架自带的表单验证外，还可以用jquery的插件jquery validate。MVC还提供强类型注解验证(using System.ComponentModel.DataAnnotations;)。强类型视图可以为视图提供一个专用视图模型，在写视图时会有跟多的数据提示，避免出错，并可以使用注解验证。很多时候，验证只和数据有关，和业务没有关系，所以写在控制器里是不合理的，因此MVC框架提供注解验证功能，来灵活的配置数据。（视频教程中17、18的验证功能在自己写的程序里没有生效，要再检查下）
注解，也称特性，一般用在编写框架上，框架提供某种功能，在使用框架时，只需要在需要的地方注解就可以了，提高灵活性。
26、在写视图时，很多元素需要动态产生，频繁的去写<>标记，繁琐又容易出错。所以MVC框架提供了html辅助器来参数化产生html代码。代码整体也更清晰了，否则html和@C#代码混在一起写，太混乱。